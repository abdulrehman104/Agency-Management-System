generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Icon {
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  settings
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
}

// ====================================================================================================================================================================================================
// We have Multiple role user in our agency.
enum Role {
  AGENCY_OWNER
  AGENCY_ADMIN
  SUBACCOUNT_USER
  SUBACCOUNT_GUEST
}

// ====================================================================================================================================================================================================
// In this user model we have user related data.
model User {
  id           String         @id @default(uuid())
  name         String
  avatarUrl    String         @db.Text
  email        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  role         Role           @default(SUBACCOUNT_USER) // In this application user have multiple role by default it is a SUBACCOUNT_USER.
  agencyId     String? // Each user can be assigned one agency only that why we can add agencyId in this user & it also have a one to many relation in the agency model.
  Agency       Agency?        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  Permissions  Permissions[] // Can a user see a sub account that was the permission model is by default agency owner has permission to all accounts but subaccount user only have those account the agency owner given access to. 
  Ticket       Ticket[] // Each user which have profile in our application they are not a contact they can also have ticket assigned to them and this come through Conon board that we are to create soon.
  Notification Notification[] // If the user change anything it receive an notification that why we can add this model.

  @@index([agencyId])
}

// ====================================================================================================================================================================================================
// With the help of this model we can give permission for the user who can access it and  the sub account which account they have access to and after that have access == Boolean that mean if they do or not.
model Permissions {
  id           String     @id @default(uuid())
  email        String
  User         User       @relation(fields: [email], references: [email], onDelete: Cascade)
  subAccountId String
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  access       Boolean

  @@index([subAccountId])
  @@index([email])
}

// ====================================================================================================================================================================================================
// In this model we have Agency Related data
model Agency {
  id               String                @id @default(uuid())
  connectAccountId String?               @default("") // This is needed for stripe because we’re are going to using connected stripe account that means every user can connect their own stripe account inside the application.              
  // customerId       String                @default("")              // This is for the subscription when they are subscribe to our application through our subscription service we need that customer id.
  name             String
  agencyLogo       String                @db.Text
  companyEmail     String                @db.Text
  companyPhone     String
  whiteLabel       Boolean               @default(true) // It is needed when the agency ow wants to show each sub account their own logo in the dashboard instead of white label logo.
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  goal             Int                   @default(5)
  users            User[] //  Then we have one to many relation with our user model in the agency we have multiple user but one user have only one agency.
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  SubAccount       SubAccount[] // Sub account member also have a part of the agency thats why we can add this subaccount in this model and then it also have a one to many relation with SubAccount model.
  SidebarOption    AgencySidebarOption[] // If you want to control what the sidebar look like or if you want to control stuff like show the sidebar hide the sidebar we want to give the user the ability to that that why we can use it.
  Invitation       Invitation[] // People can be invited to the agency so we have keep track of that as well 
  Notification     Notification[] // If the user change anything it receive an notification that why we can add this model.
  Subscription     Subscription?
  AddOns           AddOns[]
}

// ====================================================================================================================================================================================================
// In this model we have Agency Sub Account related data
model SubAccount {
  id               String                    @id @default(uuid())
  connectAccountId String?                   @default("") // This is needed for stripe because we’re are going to using connected stripe account that means every user can connect their own stripe account inside the application.
  name             String
  subAccountLogo   String                    @db.Text
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  companyEmail     String                    @db.Text
  companyPhone     String
  goal             Int                       @default(5)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  agencyId         String
  Agency           Agency                    @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SidebarOption    SubAccountSidebarOption[]
  Permissions      Permissions[]
  Funnels          Funnel[] // In this subaccount we have multiple website and this website inside this funnels.
  Media            Media[] // Inside the wa can store all our media files.
  Contact          Contact[] // Inside this we have all the contacts for the sub account will be store and contacts basically leads of the sub account.
  Trigger          Trigger[] // Automation Pipeline it has additional things.
  Automation       Automation[]
  Pipeline         Pipeline[]
  Tags             Tag[] // This tags basically for out tickets.
  Notification     Notification[] // This is the notification to our sub account.

  @@index([agencyId])
}

// ====================================================================================================================================================================================================
// Tags are basically for each ticket we can assign tag.
model Tag {
  id           String   @id @default(uuid())
  name         String
  color        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  subAccountId String

  SubAccount SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Ticket     Ticket[]

  @@index([subAccountId])
}

// ====================================================================================================================================================================================================
// Think about it as an entire Conon board that is the pipeline.
model Pipeline {
  id           String     @id @default(uuid())
  name         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Lane         Lane[]
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  subAccountId String

  @@index([subAccountId])
}

// ====================================================================================================================================================================================================
// Each pipeline has an lane.
model Lane {
  id         String   @id @default(uuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  pipelineId String
  Tickets    Ticket[]
  order      Int      @default(0)

  @@index([pipelineId])
}

// ====================================================================================================================================================================================================
// And each lane have a ticket.
model Ticket {
  id          String   @id @default(uuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  laneId      String
  order       Int      @default(0)
  Lane        Lane     @relation(fields: [laneId], references: [id], onDelete: Cascade)
  value       Decimal?
  description String?
  Tags        Tag[]

  customerId String?
  Customer   Contact? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  assignedUserId String?
  Assigned       User?   @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)

  @@index([laneId])
  @@index([customerId])
  @@index([assignedUserId])
}

// ====================================================================================================================================================================================================
// This contact have a multiple leads which come in to each sub account through the website.
model Contact {
  id           String   @id @default(uuid())
  name         String
  email        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  subAccountId String

  Subaccount SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Ticket     Ticket[]

  @@index([subAccountId])
}

// ====================================================================================================================================================================================================
// This is  a media bucket all media file in this application store inside this media.
model Media {
  id           String     @id @default(uuid())
  type         String?
  name         String
  link         String     @unique
  subAccountId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Subaccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
}

// ====================================================================================================================================================================================================
// Funnel is just a website which can create a sub account inside the sub account. 
model Funnel {
  id            String       @id @default(uuid())
  name          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  description   String?
  published     Boolean      @default(false)
  subDomainName String?      @unique
  favicon       String?      @db.Text
  subAccountId  String
  SubAccount    SubAccount   @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  FunnelPages   FunnelPage[]
  liveProducts  String?      @default("[]")
  ClassName     ClassName[]

  @@index([subAccountId])
}

// ====================================================================================================================================================================================================
// Each funnel which is created by the sub account user it has a funnel page.
model FunnelPage {
  id           String   @id @default(uuid())
  name         String
  pathName     String   @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  visits       Int      @default(0)
  content      String?  @db.Text
  order        Int
  previewImage String?  @db.Text
  funnelId     String
  Funnel       Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

// ====================================================================================================================================================================================================
model ClassName {
  id         String   @id @default(uuid())
  name       String
  color      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  funnelId   String
  customData String?  @db.Text
  Funnel     Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

// ====================================================================================================================================================================================================
// This is just the sidebar options so each option in here actually has the reason why it did this is because in the future if you wanted to give the user who is the agency owner the ability to hide option for thier sub accounts you can use this.
model AgencySidebarOption {
  id        String   @id @default(uuid())
  name      String   @default("Menu")
  link      String   @default("#")
  icon      Icon     @default(info)
  agencyId  String
  Agency    Agency?  @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
}

// ====================================================================================================================================================================================================
// As same as agency sidebar.
model SubAccountSidebarOption {
  id           String      @id @default(uuid())
  name         String      @default("Menu")
  link         String      @default("#")
  icon         Icon        @default(info)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  subAccountId String?

  @@index([subAccountId])
}

// ====================================================================================================================================================================================================
// For an agency you can send invitation to other users so we need an invitation table keep track of them.  
// Constant Valuse
enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

// ====================================================================================================================================================================================================
// Invitation Model
model Invitation {
  id       String           @id @default(uuid())
  email    String           @unique
  agencyId String
  Agency   Agency           @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  status   InvitationStatus @default(PENDING)
  role     Role             @default(SUBACCOUNT_USER)

  @@index([agencyId])
}

// ====================================================================================================================================================================================================
// Then we have the notification for the agency and the sub accounts.
model Notification {
  id           String  @id @default(uuid())
  notification String
  agencyId     String
  subAccountId String?
  userId       String

  User       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Agency     Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
  @@index([subAccountId])
  @@index([userId])
}

// ====================================================================================================================================================================================================
// Then we have the pricing plans in our applications and also have a subscription for stripe purpose.
enum Plan {
  price_1OYxkqFj9oKEERu1NbKUxXxN
  price_1OYxkqFj9oKEERu1KfJGWxgN
}

// ====================================================================================================================================================================================================
model Subscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plan      Plan?
  price     String?
  active    Boolean  @default(false)

  priceId              String
  customerId           String
  currentPeriodEndDate DateTime
  subscritiptionId     String   @unique

  agencyId String? @unique
  Agency   Agency? @relation(fields: [agencyId], references: [id])

  @@index([customerId])
}

// ====================================================================================================================================================================================================
// Cover in future 
model AddOns {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  active    Boolean  @default(false)
  priceId   String   @unique
  agencyId  String?
  Agency    Agency?  @relation(fields: [agencyId], references: [id])

  @@index([agencyId])
}

// Trigger, Automation, AutomationInstance & Action (Optional):
enum TriggerTypes {
  CONTACT_FORM
}

model Trigger {
  id           String       @id @default(uuid())
  name         String
  type         TriggerTypes
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  subAccountId String
  Subaccount   SubAccount   @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Automations  Automation[]

  @@index([subAccountId])
}

model Automation {
  id                 String               @id @default(uuid())
  name               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  triggerId          String?
  published          Boolean              @default(false)
  Trigger            Trigger?             @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  subAccountId       String
  Subaccount         SubAccount           @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Action             Action[]
  AutomationInstance AutomationInstance[]

  @@index([triggerId])
  @@index([subAccountId])
}

model AutomationInstance {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  active       Boolean    @default(false)

  @@index([automationId])
}

enum ActionType {
  CREATE_CONTACT
}

model Action {
  id           String     @id @default(uuid())
  name         String
  type         ActionType
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  order        Int
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  laneId       String     @default("0")

  @@index([automationId])
}
